// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class NftMinted extends ethereum.Event {
  get params(): NftMinted__Params {
    return new NftMinted__Params(this);
  }
}

export class NftMinted__Params {
  _event: NftMinted;

  constructor(event: NftMinted) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftUid(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get nftUri(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class NftUriUpdated extends ethereum.Event {
  get params(): NftUriUpdated__Params {
    return new NftUriUpdated__Params(this);
  }
}

export class NftUriUpdated__Params {
  _event: NftUriUpdated;

  constructor(event: NftUriUpdated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftUid(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get nftUri(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PocoNft extends ethereum.SmartContract {
  static bind(address: Address): PocoNft {
    return new PocoNft("PocoNft", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEthAmountInMicroUsd(_value: BigInt): BigInt {
    let result = super.call(
      "getEthAmountInMicroUsd",
      "getEthAmountInMicroUsd(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_value)]
    );

    return result[0].toBigInt();
  }

  try_getEthAmountInMicroUsd(_value: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEthAmountInMicroUsd",
      "getEthAmountInMicroUsd(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_value)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNftIdByUid(_nftUid: Bytes): BigInt {
    let result = super.call(
      "getNftIdByUid",
      "getNftIdByUid(bytes17):(uint256)",
      [ethereum.Value.fromFixedBytes(_nftUid)]
    );

    return result[0].toBigInt();
  }

  try_getNftIdByUid(_nftUid: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNftIdByUid",
      "getNftIdByUid(bytes17):(uint256)",
      [ethereum.Value.fromFixedBytes(_nftUid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNftUriByUid(_nftUid: Bytes): string {
    let result = super.call(
      "getNftUriByUid",
      "getNftUriByUid(bytes17):(string)",
      [ethereum.Value.fromFixedBytes(_nftUid)]
    );

    return result[0].toString();
  }

  try_getNftUriByUid(_nftUid: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getNftUriByUid",
      "getNftUriByUid(bytes17):(string)",
      [ethereum.Value.fromFixedBytes(_nftUid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMintEnabled(): boolean {
    let result = super.call("isMintEnabled", "isMintEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_isMintEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMintEnabled", "isMintEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintFeeMicroUsd(): BigInt {
    let result = super.call(
      "mintFeeMicroUsd",
      "mintFeeMicroUsd():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_mintFeeMicroUsd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintFeeMicroUsd",
      "mintFeeMicroUsd():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintFeeRangeLimitPercent(): BigInt {
    let result = super.call(
      "mintFeeRangeLimitPercent",
      "mintFeeRangeLimitPercent():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_mintFeeRangeLimitPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintFeeRangeLimitPercent",
      "mintFeeRangeLimitPercent():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceFeed(): Address {
    let result = super.call("priceFeed", "priceFeed():(address)", []);

    return result[0].toAddress();
  }

  try_priceFeed(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceFeed", "priceFeed():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _isMintEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _mintFeeMicroUsd(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _mintFeeRangeLimitPercent(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _priceFeed(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class MintNftCall extends ethereum.Call {
  get inputs(): MintNftCall__Inputs {
    return new MintNftCall__Inputs(this);
  }

  get outputs(): MintNftCall__Outputs {
    return new MintNftCall__Outputs(this);
  }
}

export class MintNftCall__Inputs {
  _call: MintNftCall;

  constructor(call: MintNftCall) {
    this._call = call;
  }

  get _nftUid(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _nftUri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class MintNftCall__Outputs {
  _call: MintNftCall;

  constructor(call: MintNftCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetIsMintEnabledCall extends ethereum.Call {
  get inputs(): SetIsMintEnabledCall__Inputs {
    return new SetIsMintEnabledCall__Inputs(this);
  }

  get outputs(): SetIsMintEnabledCall__Outputs {
    return new SetIsMintEnabledCall__Outputs(this);
  }
}

export class SetIsMintEnabledCall__Inputs {
  _call: SetIsMintEnabledCall;

  constructor(call: SetIsMintEnabledCall) {
    this._call = call;
  }

  get _isMintEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIsMintEnabledCall__Outputs {
  _call: SetIsMintEnabledCall;

  constructor(call: SetIsMintEnabledCall) {
    this._call = call;
  }
}

export class SetMintFeeMicroUsdCall extends ethereum.Call {
  get inputs(): SetMintFeeMicroUsdCall__Inputs {
    return new SetMintFeeMicroUsdCall__Inputs(this);
  }

  get outputs(): SetMintFeeMicroUsdCall__Outputs {
    return new SetMintFeeMicroUsdCall__Outputs(this);
  }
}

export class SetMintFeeMicroUsdCall__Inputs {
  _call: SetMintFeeMicroUsdCall;

  constructor(call: SetMintFeeMicroUsdCall) {
    this._call = call;
  }

  get _mintFeeMicroUsd(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMintFeeMicroUsdCall__Outputs {
  _call: SetMintFeeMicroUsdCall;

  constructor(call: SetMintFeeMicroUsdCall) {
    this._call = call;
  }
}

export class SetMintFeeRangeLimitPercentCall extends ethereum.Call {
  get inputs(): SetMintFeeRangeLimitPercentCall__Inputs {
    return new SetMintFeeRangeLimitPercentCall__Inputs(this);
  }

  get outputs(): SetMintFeeRangeLimitPercentCall__Outputs {
    return new SetMintFeeRangeLimitPercentCall__Outputs(this);
  }
}

export class SetMintFeeRangeLimitPercentCall__Inputs {
  _call: SetMintFeeRangeLimitPercentCall;

  constructor(call: SetMintFeeRangeLimitPercentCall) {
    this._call = call;
  }

  get _mintFeeRangeLimitPercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMintFeeRangeLimitPercentCall__Outputs {
  _call: SetMintFeeRangeLimitPercentCall;

  constructor(call: SetMintFeeRangeLimitPercentCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateNftUriCall extends ethereum.Call {
  get inputs(): UpdateNftUriCall__Inputs {
    return new UpdateNftUriCall__Inputs(this);
  }

  get outputs(): UpdateNftUriCall__Outputs {
    return new UpdateNftUriCall__Outputs(this);
  }
}

export class UpdateNftUriCall__Inputs {
  _call: UpdateNftUriCall;

  constructor(call: UpdateNftUriCall) {
    this._call = call;
  }

  get _nftUid(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _nftUri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateNftUriCall__Outputs {
  _call: UpdateNftUriCall;

  constructor(call: UpdateNftUriCall) {
    this._call = call;
  }
}

export class WithdrawContractBalanceCall extends ethereum.Call {
  get inputs(): WithdrawContractBalanceCall__Inputs {
    return new WithdrawContractBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawContractBalanceCall__Outputs {
    return new WithdrawContractBalanceCall__Outputs(this);
  }
}

export class WithdrawContractBalanceCall__Inputs {
  _call: WithdrawContractBalanceCall;

  constructor(call: WithdrawContractBalanceCall) {
    this._call = call;
  }
}

export class WithdrawContractBalanceCall__Outputs {
  _call: WithdrawContractBalanceCall;

  constructor(call: WithdrawContractBalanceCall) {
    this._call = call;
  }
}
